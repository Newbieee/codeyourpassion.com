{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/datasharing.service.ts","webpack:///./src/app/manageprograms.service.ts","webpack:///./src/app/queue-component/queue-component.component.html","webpack:///./src/app/queue-component/queue-component.component.ts","webpack:///./src/app/task-component/editing-dialog.component.html","webpack:///./src/app/task-component/task-component.component.html","webpack:///./src/app/task-component/task-component.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<mat-toolbar color=\\\"primary\\\">\\n  <span routerLink=\\\"/\\\" class=\\\"fill-space\\\">Offline Demo</span>\\n  <span></span>\\n  <span *ngIf=\\\"!status\\\">You are offline!</span>\\n  <span *ngIf=\\\"status\\\">You are online!</span>\\n</mat-toolbar>\\n\\n\\n<div class=\\\"btnToggleGrp\\\">\\n\\n  <mat-button-toggle-group name=\\\"fontStyle\\\">\\n    <mat-button-toggle value=\\\"queue\\\" routerLink=\\\"/queue\\\" routerLinkActive=\\\"active\\\">Queue</mat-button-toggle>\\n    <mat-button-toggle value=\\\"task\\\" routerLink=\\\"/task\\\" routerLinkActive=\\\"active\\\">Task</mat-button-toggle>\\n  </mat-button-toggle-group>\\n</div>\\n\\n<router-outlet></router-outlet>\\n\"","import { Component } from '@angular/core';\nimport { Observable, fromEvent, merge, of } from 'rxjs';\nimport { mapTo } from 'rxjs/operators';\nimport { DatasharingService } from './datasharing.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  status:boolean;\n\n  online$: Observable<boolean>;\n\nconstructor(private dataSharingService: DatasharingService) {\n    this.online$ = merge(\n      of(navigator.onLine),\n      fromEvent(window, 'online').pipe(mapTo(true)),\n      fromEvent(window, 'offline').pipe(mapTo(false))\n    )\n    this.networkStatus();\n  }\n\n  public networkStatus() {\n    this.online$.subscribe(value => {\n      this.status = value;\n      //let update = this.status.toString();\n      this.dataSharingService.changeNetworkStatus(this.status);\n    })\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { QueueComponentComponent } from './queue-component/queue-component.component';\nimport { TaskComponentComponent, EditingDialogComponent } from './task-component/task-component.component';\nimport { MatTableModule, MatButtonToggleModule, MatCheckboxModule, MatButtonModule, MatDialogModule, MatInputModule, MatSnackBarModule, MatProgressSpinnerModule  } from '@angular/material';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\n\nconst appRoutes: Routes = [\n  {path: 'queue', component: QueueComponentComponent},\n  {path: 'task', component: TaskComponentComponent},\n  {path: '', redirectTo: '/', pathMatch: 'full' }\n]\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    QueueComponentComponent,\n    TaskComponentComponent,\n    EditingDialogComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    MatToolbarModule,\n    MatTableModule,\n    RouterModule.forRoot(appRoutes),\n    MatButtonToggleModule,\n    MatCheckboxModule,\n    MatButtonModule,\n    HttpClientModule,\n    MatDialogModule,\n    MatFormFieldModule,\n    MatInputModule,\n    FormsModule,\n    MatSnackBarModule,\n    MatProgressSpinnerModule\n  ],\n  entryComponents: [EditingDialogComponent],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { Subject  } from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DatasharingService {\n\n  constructor() { }\n\n  private statusSource = new Subject<boolean>();\n\n  networkStatus = this.statusSource.asObservable();\n\n\n  changeNetworkStatus(stats: boolean) {\n    this.statusSource.next(stats);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { Program } from './program';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport * as localforage from 'localforage';\nimport * as firebase from 'firebase';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ManageprogramsService {\n\n  app;\n  database;\n  private programsUrl = \"https://offline-demo-160ec.firebaseio.com/programs.json?orderBy=%22claimed%22&equalTo=true\";\n  private allProgramsUrl = \"https://offline-demo-160ec.firebaseio.com/programs.json?orderBy=%22claimed%22&equalTo=false\";\n  private baseProgramUrl = \"https://offline-demo-160ec.firebaseio.com/programs\";\n\n  constructor(private http: HttpClient) {\n    let config = {\n      apiKey: \"AIzaSyDV7k2PMGjP0NidIVtAlpW-uapBJXZr0kE\",\n      authDomain: \"offline-demo-160ec.firebaseapp.com\",\n      databaseURL: \"https://offline-demo-160ec.firebaseio.com\",\n      projectId: \"offline-demo-160ec\",\n      storageBucket: \"offline-demo-160ec.appspot.com\",\n      messagingSenderId: \"817878925518\"\n    };\n    this.app = firebase.initializeApp(config);\n    console.log(this.app.name);\n    this.database = firebase.database();\n  }\n\n  getPrograms(): Observable<Program[]> {\n    let self = this\n    //return this.database.ref('/programs').orderByChild(\"claimed\").equalTo(false).once('value');\n    return this.http.get<Program[]>(this.programsUrl);\n  }\n\n  getAllPrograms(): Observable<Program[]> {\n    let self = this\n    //return this.database.ref('/programs').orderByChild(\"claimed\").equalTo(false).once('value');\n    return this.http.get<Program[]>(this.allProgramsUrl);\n  }\n\n  updateProgram(programId: number, program: Program): Observable<Program> {\n    let url = this.baseProgramUrl + \"/\" + programId +\".json\";\n    return this.http.put<Program>(url, program);\n  }\n}\n","module.exports = \"<mat-toolbar>\\n  <span class=\\\"fill-space\\\">All Programs</span>\\n  <span></span>\\n  <button mat-raised-button color=\\\"primary\\\" (click)=\\\"downloadData()\\\">Download</button>\\n</mat-toolbar>\\n<table mat-table [dataSource]=\\\"dataSource\\\">\\n\\n  <ng-container matColumnDef=\\\"programId\\\">\\n    <th mat-header-cell *matHeaderCellDef>\\n      Program ID\\n    </th>\\n    <td mat-cell *matCellDef=\\\"let program\\\">\\n      {{program.programId}}\\n    </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"programName\\\">\\n    <th mat-header-cell *matHeaderCellDef>\\n      Original Title\\n    </th>\\n    <td mat-cell *matCellDef=\\\"let program\\\">\\n      {{program.programName}}\\n    </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"language\\\">\\n    <th mat-header-cell *matHeaderCellDef>\\n      Language\\n    </th>\\n    <td mat-cell *matCellDef=\\\"let program\\\">\\n      {{program.language}}\\n    </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"keyword\\\">\\n    <th mat-header-cell *matHeaderCellDef>\\n      Keyword\\n    </th>\\n    <td mat-cell *matCellDef=\\\"let program\\\">\\n      {{program.keyword}}\\n    </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"claimed\\\">\\n    <th mat-header-cell *matHeaderCellDef>\\n      Claim\\n    </th>\\n    <td mat-cell *matCellDef=\\\"let program\\\">\\n      <mat-checkbox [checked]=\\\"program.claimed\\\" (change)=\\\"valueChange(program, $event)\\\"></mat-checkbox>\\n    </td>\\n  </ng-container>\\n\\n  <tr mat-header-row *matHeaderRowDef=\\\"columnsToDisplay\\\"></tr>\\n  <tr mat-row *matRowDef=\\\"let row; columns: columnsToDisplay\\\">\\n\\n  </tr>\\n\\n</table>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Program } from '../program';\nimport { PROGRAMS } from '../programs';\nimport { ManageprogramsService } from '../manageprograms.service';\n\n@Component({\n  selector: 'app-queue-component',\n  templateUrl: './queue-component.component.html'\n})\nexport class QueueComponentComponent implements OnInit {\n\n  constructor(private manageprogramsService: ManageprogramsService) { }\n\n  programs: Program[] = [];\n  downloadedData: Program[] = [];\n  columnsToDisplay: string[] = ['programId', 'programName', 'language', 'keyword', 'claimed'];\n  //dataSource = PROGRAMS;\n  dataSource: Program[] = [];\n\n  downloadData() {\n    //console.log(this.dataSource);\n\n    if(this.downloadedData.length > 0) {\n      let modifiedPrograms: any[] = [];\n      let newObj: object;\n      for(let i = 0; i < this.downloadedData.length; i++) {\n          let obj = this.downloadedData[i];\n          let programId: number = parseInt(obj.programId);\n          programId = programId - 1;\n          //let str: string = \"{\\\"\"+programId+\"\\\":{\\\"claimed\\\": true}}\";\n\n          //newObj = JSON.parse(str);\n          //console.log(newObj);\n\n          //modifiedPrograms.push(newObj);\n          this.manageprogramsService.database.ref(\"/programs\").child(programId).update({\"claimed\": true});\n      }\n      console.log(modifiedPrograms);\n      this.getAllPrograms();\n\n    }\n\n    // this.manageprogramsService.updateProgram(this.dataSource).subscribe(response => {\n    //   console.log(response);\n    //   //this.getAllPrograms();\n    // });\n\n  }\n\n\n\n  valueChange(prg, event) {\n    //console.log(prg);\n    //console.log(event.checked);\n\n    //if program checked\n    if(event.checked) {\n      //prg.claimed = true;\n      this.downloadedData.push(prg);\n      prg.claimed = true;\n      console.log(this.dataSource);\n    }\n    else {\n      for(let i = 0; i < this.downloadedData.length; i++) {\n        if(prg.programId === this.downloadedData[i].programId) {\n          //console.log(\"prg to remove : \"+this.downloadedData[i].programName);\n          this.downloadedData.splice(i, 1);\n          break;\n        }\n      }\n    }\n    //console.log(this.downloadedData);\n  }\n\n  getAllPrograms(): void {\n    //let _this = this;\n    this.manageprogramsService.getAllPrograms().subscribe(response => {\n\n    let objKey = Object.keys(response);\n    //console.log(objKey);\n    for(let i = 0; i<objKey.length; i++) {\n      let obj = response[objKey[i]];\n      //console.log(obj);\n      this.programs.push(obj);\n    }\n    //console.log(this.dataSource);\n    this.dataSource = this.programs;\n\n  });\n}\n\n\n  ngOnInit() {\n    this.getAllPrograms();\n  }\n\n}\n","module.exports = \"<h3 mat-dialog-title>Program Details</h3>\\r\\n<mat-dialog-content>\\r\\n  <form class=\\\"editingForm fullwidth\\\" name=\\\"editingForm\\\">\\r\\n    <table>\\r\\n\\r\\n    <tr>\\r\\n      <td>\\r\\n        <mat-form-field>\\r\\n          <mat-label>Program Id</mat-label>\\r\\n          <input matInput placeholder=\\\"program id\\\" value=\\\"{{data.programId}}\\\" disabled=\\\"true\\\"/>\\r\\n        </mat-form-field>\\r\\n      </td>\\r\\n      <td></td>\\r\\n      <td>\\r\\n        <mat-form-field>\\r\\n          <mat-label>Program Title</mat-label>\\r\\n          <input matInput placeholder=\\\"title\\\" value=\\\"{{data.programName}}\\\" disabled=\\\"true\\\"/>\\r\\n        </mat-form-field>\\r\\n      </td>\\r\\n    </tr>\\r\\n\\r\\n    <tr>\\r\\n      <td>\\r\\n        <mat-form-field>\\r\\n          <mat-label>Language</mat-label>\\r\\n          <input matInput placeholder=\\\"language\\\" value=\\\"{{data.language}}\\\" disabled=\\\"true\\\"/>\\r\\n        </mat-form-field>\\r\\n      </td>\\r\\n      <td></td>\\r\\n      <td>\\r\\n        <mat-form-field>\\r\\n          <mat-label>Keyword</mat-label>\\r\\n          <input matInput placeholder=\\\"keyword\\\" value=\\\"{{data.keyword}}\\\" disabled=\\\"true\\\"/>\\r\\n        </mat-form-field>\\r\\n      </td>\\r\\n    </tr>\\r\\n\\r\\n    <tr>\\r\\n      <td colSpan=\\\"10\\\">\\r\\n        <mat-form-field class=\\\"fullwidth\\\">\\r\\n          <mat-label>Copy Description</mat-label>\\r\\n          <textarea matInput placeholder=\\\"\\\"   [(ngModel)]=\\\"data.copyDesc\\\" name=\\\"copyDesc\\\"></textarea>\\r\\n        </mat-form-field>\\r\\n      </td>\\r\\n    </tr>\\r\\n\\r\\n    </table>\\r\\n  </form>\\r\\n</mat-dialog-content>\\r\\n\\r\\n<mat-dialog-actions>\\r\\n  <button mat-raised-button color=\\\"warn\\\" (click)=\\\"closeDialog()\\\">Save</button>\\r\\n</mat-dialog-actions>\\r\\n\"","module.exports = \"<mat-toolbar>\\n  <span class=\\\"fill-space\\\">Downloaded Programs</span>\\n  <span *ngIf=\\\"networkStatus && dataToSync\\\">You have data to be synced to server. <button mat-button color=\\\"warn\\\" (click)=\\\"syncData()\\\">Sync Now</button> </span>\\n\\n  <button mat-raised-button color=\\\"primary\\\" (click)=\\\"getPrograms()\\\">Refresh</button>\\n\\n</mat-toolbar>\\n<div class=\\\"dark-overlay\\\" *ngIf=\\\"syncInProgress\\\">\\n  <mat-spinner style=\\\"margin:0 auto;\\\" mode=\\\"indeterminate\\\" color=\\\"warn\\\"></mat-spinner>\\n</div>\\n\\n<table mat-table [dataSource]=\\\"dataSource\\\">\\n\\n  <ng-container matColumnDef=\\\"programId\\\">\\n    <th mat-header-cell *matHeaderCellDef>\\n      Program ID\\n    </th>\\n    <td mat-cell *matCellDef=\\\"let program\\\">\\n      {{program.programId}}\\n    </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"programName\\\">\\n    <th mat-header-cell *matHeaderCellDef>\\n      Original Title\\n    </th>\\n    <td mat-cell *matCellDef=\\\"let program\\\">\\n      {{program.programName}}\\n    </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"language\\\">\\n    <th mat-header-cell *matHeaderCellDef>\\n      Language\\n    </th>\\n    <td mat-cell *matCellDef=\\\"let program\\\">\\n      {{program.language}}\\n    </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"keyword\\\">\\n    <th mat-header-cell *matHeaderCellDef>\\n      Keyword\\n    </th>\\n    <td mat-cell *matCellDef=\\\"let program\\\">\\n      {{program.keyword}}\\n    </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"copyDesc\\\">\\n    <th mat-header-cell *matHeaderCellDef>\\n      Copy\\n    </th>\\n    <td mat-cell *matCellDef=\\\"let program\\\">\\n      {{program.copyDesc}}\\n    </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"action\\\">\\n    <th mat-header-cell *matHeaderCellDef>\\n      Action\\n    </th>\\n    <td mat-cell *matCellDef=\\\"let program\\\">\\n      <button mat-button (click)=\\\"openDialog(program)\\\">Edit</button>\\n    </td>\\n  </ng-container>\\n\\n  <tr mat-header-row *matHeaderRowDef=\\\"columnsToDisplay\\\"></tr>\\n  <tr mat-row *matRowDef=\\\"let row; columns: columnsToDisplay\\\">\\n\\n  </tr>\\n\\n</table>\\n\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { ManageprogramsService } from '../manageprograms.service';\nimport { Program } from '../program';\nimport { map } from 'rxjs/operators';\nimport * as localforage from 'localforage';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA, MatSnackBar, MatDialogTitle } from '@angular/material';\nimport { DatasharingService } from '../datasharing.service';\n\n@Component({\n  selector: 'app-task-component',\n  templateUrl: './task-component.component.html'\n})\nexport class TaskComponentComponent implements OnInit {\n\n  programs: Program[] = [];\n  dataSource: Program[] = [];\n  downloadedData: Program[] = [];\n  columnsToDisplay: string[] = ['programId', 'programName', 'language', 'keyword', 'copyDesc', 'action'];\n  networkStatus: boolean;\n  dataToSync: boolean = false;\n  syncInProgress: boolean = false;\n\n  constructor(private manageprogramsService: ManageprogramsService, public dialog: MatDialog, public snackBar: MatSnackBar, private dataSharingService: DatasharingService) {  }\n\n  program: Program;\n  private baseProgramUrl = \"https://offline-demo-160ec.firebaseio.com/programs\";\n  isOffline: boolean = false;\n\n  getPrograms(): void {\n    //let _this = this;\n    this.manageprogramsService.getPrograms().subscribe(response => {\n    this.programs = [];\n      /*if(response && response.val() == null) {\n        console.log(\"no data retrieved\");\n        return;\n      }\n      let objKey = Object.keys(response.val());\n      console.log(response.val());\n      for(let i = 0; i<response.val().length; i++) {\n        let obj = response.val()[i];\n        //console.log(obj);\n        _this.programs.push(obj);\n      }\n      _this.dataSource = _this.programs;\n      localforage.setItem(\"userPrograms\", _this.dataSource);\n    });*/\n    let objKey = Object.keys(response);\n    //console.log(objKey);\n    for(let i = 0; i<objKey.length; i++) {\n      let obj = response[objKey[i]];\n      //console.log(obj);\n      this.programs.push(obj);\n    }\n    //console.log(this.dataSource);\n    this.dataSource = this.programs;\n\n    localforage.getItem(\"userPrograms\", () => {\n      localforage.removeItem('userProgrms', () => {\n        localforage.setItem(\"userPrograms\", response);\n      })\n    });\n\n    //localforage.setItem(\"userPrograms\", this.dataSource);\n  });\n}\n\nopenDialog(prg, event): void {\n  const dialogRef = this.dialog.open(EditingDialogComponent, {\n    width: 'auto',\n    data: prg\n  });\n\n  dialogRef.afterClosed().subscribe(result => {\n      //console.log('The dialog was closed');\n      this.program = result;\n      //console.log(this.program);\n      if(this.program && this.program.copyDesc && this.program.copyDesc != \"\") {\n        this.saveData(this.program);\n      }\n    });\n}\n\nsaveData(prg): void {\n\n  //let newObj: object;\n  let programId: number = parseInt(prg.programId);\n  programId = programId - 1;\n  //let description = prg.copyDesc;\n  this.updateLocalDS(prg);\n  this.manageprogramsService.updateProgram(programId, prg).subscribe(response => {\n    console.log(\"Program updated successfully in server!\");\n    //console.log(response);\n    this.snackBar.open('Program Updated Successfully on server!', '', {duration: 2000});\n  }, error=> {\n    console.log(\"Error while updating data to the server\");\n    this.snackBar.open('Program Updated Successfully on Local Data Store!', '', {duration: 2000});\n    let queuedReq:any[] = [];\n    let qObj = {\n      \"url\": this.baseProgramUrl + \"/\" + programId +\".json\",\n      \"data\": prg,\n      \"position\": programId\n    }\n    localforage.getItem<any[]>(\"queuedReq\").then(function(value){\n      if(value) {\n        queuedReq = value;\n      }\n      queuedReq.push(qObj);\n\n      localforage.setItem(\"queuedReq\", queuedReq).then(function(value){\n        console.log(\"Updated Q requests!\");\n      })\n    })\n  })\n\n}\n\nupdateLocalDS(prg): void {\n\n  localforage.getItem(\"userPrograms\").then(function(value){\n    //console.log(\"Existing obj\");\n    //console.log(value);\n    let objKey = Object.keys(value);\n    //console.log(objKey);\n    for(let i = 0; i<objKey.length; i++) {\n      if(value[objKey[i]].programId == prg.programId) {\n        value[objKey[i]].copyDesc = prg.copyDesc;\n        break;\n      }\n    }\n    localforage.setItem(\"userPrograms\", value).then(function(value){\n      console.log(\"Updated data in Local DS\");\n    }).catch(function(error){\n      console.log(\"Failed to update data in Local DS\");\n    })\n  })\n}\n\nisDataToSync(): void {\n  let _self = this;\n  if(this.networkStatus){\n    localforage.getItem<any[]>(\"queuedReq\").then(function(value){\n      if(value != null  && value.length > 0) {\n        _self.dataToSync = true;\n      }\n      else {\n        _self.dataToSync = false;\n      }\n    })\n    .catch(function(error){\n      console.log(error);\n      _self.dataToSync = false;\n    })\n  }\n\n}\n\nsyncData() {\n  if(this.networkStatus && this.isDataToSync) {\n    let _self = this;\n    let queuedReq: any[] = [];\n    localforage.getItem<any[]>(\"queuedReq\").then(function(value){\n      queuedReq = value;\n      _self.updateQData(queuedReq, 0);\n    })\n    .catch(function(error){\n      console.log(\"Error while retrieving queued data!\");\n      console.log(error);\n    })\n  }\n}\n\nupdateQData(queuedReq, position) {\n  if(queuedReq && queuedReq.length > 0) {\n    let qLength = queuedReq.length;\n    let reqObj = queuedReq[position];\n    this.syncInProgress = true;\n    this.manageprogramsService.updateProgram(reqObj.position, reqObj.data).subscribe(response => {\n      console.log(reqObj.position + \" position synced to the server!\");\n      position = position + 1;\n      if(qLength === position) {\n        this.syncInProgress = false;\n        let _self = this;\n        console.log(\"All Q request synced\");\n        localforage.removeItem(\"queuedReq\", function(response){\n            _self.updateSyncFlag();\n          console.log(\"All Q requests removed from Local DS\");\n          //_self.snackBar.open('All data updated to the server!', '', {duration: 2000});\n        })\n      }\n      else {\n        this.updateQData(queuedReq, position);\n      }\n    }, error=> {\n      console.log(reqObj.position + \"position failed to sync to the server!\");\n\n      if(qLength === position) {\n        this.syncInProgress = false;\n        let _self = this;\n        console.log(\"All Q request synced\");\n        localforage.removeItem(\"queuedReq\", function(response){\n          _self.updateSyncFlag();\n          console.log(\"All Q requests removed from Local DS\");\n          //_self.snackBar.open('All data updated to the server!', '', {duration: 2000});\n        })\n      }\n      else {\n        this.updateQData(queuedReq, position+1);\n      }\n    })\n  }\n}\n\nupdateSyncFlag() {\n  this.dataToSync = false;\n  this.snackBar.open('Offline data updated to the server!', '', {duration: 2000});\n}\n\n  ngOnInit() {\n\n    this.getPrograms();\n    this.dataSharingService.networkStatus.subscribe(status => {\n      this.networkStatus = status;\n      this.isDataToSync();\n       //console.log(\"Status Updated: \" +this.networkStatus);\n\n    });\n    this.isDataToSync();\n  }\n\n}\n\n@Component({\n  selector: 'editing-dialog',\n  templateUrl: 'editing-dialog.component.html'\n})\nexport class EditingDialogComponent {\n\n  programRef: Program;\n\n  constructor(public dialogRef: MatDialogRef<EditingDialogComponent>, @Inject(MAT_DIALOG_DATA) public data: any) {}\n\n  closeDialog(): void {\n    this.dialogRef.close(this.data);\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, for easier debugging, you can ignore zone related error\n * stack frames such as `zone.run`/`zoneDelegate.invokeTask` by importing the\n * below file. Don't forget to comment it out in production mode\n * because it will have a performance impact when errors are thrown\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}